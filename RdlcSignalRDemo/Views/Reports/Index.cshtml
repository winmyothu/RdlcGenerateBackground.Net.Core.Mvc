@{
    Layout = null;
    ViewData["Title"] = "SignalR RDLC Background Generation";
}
<!doctype html>
<html>
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"]</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@8.0.0/dist/browser/signalr.min.js"></script>
</head>
<body class="container py-4">
    <h2 class="mb-3">@ViewData["Title"]</h2>

    <div class="mb-3">
        <a class="btn btn-outline-secondary" href="/Reports/List">View All Jobs</a>
    </div>

    <form id="genForm" class="row row-cols-lg-auto g-2 align-items-center mb-3">
        <div class="col-12">
            <label class="form-label">Report Name</label>
            <input name="reportName" class="form-control" value="Sample" />
        </div>
        <div class="col-12">
            <button type="submit" class="btn btn-primary mt-4">Generate</button>
        </div>
    </form>

    <div class="mb-2 fw-semibold" id="statusText">—</div>

    <div class="progress" style="height: 26px;">
        <div id="progressBar" class="progress-bar" role="progressbar" style="width: 0%">0%</div>
    </div>

    <div id="linkArea" class="mt-3"></div>
    <div id="errorArea" class="mt-2 text-danger"></div>

    <script>
        const progressBar = document.getElementById('progressBar');
        const statusText = document.getElementById('statusText');
        const linkArea = document.getElementById('linkArea');
        const errorArea = document.getElementById('errorArea');

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/reportHub")
            .build();

        connection.start().catch(err => console.error(err));

        document.getElementById('genForm').addEventListener('submit', async e => {
            e.preventDefault();
            linkArea.innerHTML = '';
            errorArea.textContent = '';
            progressBar.style.width = '0%';
            progressBar.textContent = '0%';
            progressBar.classList.remove('bg-success','bg-danger');
            statusText.textContent = 'Queuing...';

            const fd = new FormData(e.target);
            const res = await fetch('/Reports/Enqueue', { method: 'POST', body: fd });
            const { jobId } = await res.json();
        // Join the job group so this client receives updates
           await connection.invoke("JoinJobGroup", jobId);

           connection.off("UpdateJobStatus");
            connection.on("UpdateJobStatus", (jobId, status, progress, filePath) => {

                 console.log(`Job ${jobId} => ${status} (${progress}%)`);
                statusText.textContent = status;
                progressBar.style.width = progress + '%';
                progressBar.textContent = progress + '%';

                if (status === 'Completed' && filePath) {
                    progressBar.classList.add('bg-success');
                    linkArea.innerHTML = `<a class="btn btn-success" href="${filePath}" target="_blank">Download PDF</a>`;
                }
                if (status === 'Failed') {
                    progressBar.classList.add('bg-danger');
                    errorArea.textContent = "Generation failed.";
                }
            });
        });
    </script>
</body>
</html>
